/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.debezium.connector.mysql;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class Source extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -390190420587179608L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Source\",\"namespace\":\"io.debezium.connector.mysql\",\"fields\":[{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"connector\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ts_ms\",\"type\":\"long\"},{\"name\":\"snapshot\",\"type\":[{\"type\":\"string\",\"connect.version\":1,\"connect.parameters\":{\"allowed\":\"true,last,false\"},\"connect.default\":\"false\",\"connect.name\":\"io.debezium.data.Enum\"},\"null\"],\"default\":\"false\"},{\"name\":\"db\",\"type\":\"string\"},{\"name\":\"table\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"server_id\",\"type\":\"long\"},{\"name\":\"gtid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"file\",\"type\":\"string\"},{\"name\":\"pos\",\"type\":\"long\"},{\"name\":\"row\",\"type\":\"int\"},{\"name\":\"thread\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"query\",\"type\":[\"null\",\"string\"],\"default\":null}],\"connect.name\":\"io.debezium.connector.mysql.Source\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Source> ENCODER =
      new BinaryMessageEncoder<Source>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Source> DECODER =
      new BinaryMessageDecoder<Source>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Source> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Source> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Source> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Source>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Source to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Source from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Source instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Source fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private org.apache.avro.util.Utf8 version;
   private org.apache.avro.util.Utf8 connector;
   private org.apache.avro.util.Utf8 name;
   private long ts_ms;
   private org.apache.avro.util.Utf8 snapshot;
   private org.apache.avro.util.Utf8 db;
   private org.apache.avro.util.Utf8 table;
   private long server_id;
   private org.apache.avro.util.Utf8 gtid;
   private org.apache.avro.util.Utf8 file;
   private long pos;
   private int row;
   private java.lang.Long thread;
   private org.apache.avro.util.Utf8 query;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Source() {}

  /**
   * All-args constructor.
   * @param version The new value for version
   * @param connector The new value for connector
   * @param name The new value for name
   * @param ts_ms The new value for ts_ms
   * @param snapshot The new value for snapshot
   * @param db The new value for db
   * @param table The new value for table
   * @param server_id The new value for server_id
   * @param gtid The new value for gtid
   * @param file The new value for file
   * @param pos The new value for pos
   * @param row The new value for row
   * @param thread The new value for thread
   * @param query The new value for query
   */
  public Source(org.apache.avro.util.Utf8 version, org.apache.avro.util.Utf8 connector, org.apache.avro.util.Utf8 name, java.lang.Long ts_ms, org.apache.avro.util.Utf8 snapshot, org.apache.avro.util.Utf8 db, org.apache.avro.util.Utf8 table, java.lang.Long server_id, org.apache.avro.util.Utf8 gtid, org.apache.avro.util.Utf8 file, java.lang.Long pos, java.lang.Integer row, java.lang.Long thread, org.apache.avro.util.Utf8 query) {
    this.version = version;
    this.connector = connector;
    this.name = name;
    this.ts_ms = ts_ms;
    this.snapshot = snapshot;
    this.db = db;
    this.table = table;
    this.server_id = server_id;
    this.gtid = gtid;
    this.file = file;
    this.pos = pos;
    this.row = row;
    this.thread = thread;
    this.query = query;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return version;
    case 1: return connector;
    case 2: return name;
    case 3: return ts_ms;
    case 4: return snapshot;
    case 5: return db;
    case 6: return table;
    case 7: return server_id;
    case 8: return gtid;
    case 9: return file;
    case 10: return pos;
    case 11: return row;
    case 12: return thread;
    case 13: return query;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: version = (org.apache.avro.util.Utf8)value$; break;
    case 1: connector = (org.apache.avro.util.Utf8)value$; break;
    case 2: name = (org.apache.avro.util.Utf8)value$; break;
    case 3: ts_ms = (java.lang.Long)value$; break;
    case 4: snapshot = (org.apache.avro.util.Utf8)value$; break;
    case 5: db = (org.apache.avro.util.Utf8)value$; break;
    case 6: table = (org.apache.avro.util.Utf8)value$; break;
    case 7: server_id = (java.lang.Long)value$; break;
    case 8: gtid = (org.apache.avro.util.Utf8)value$; break;
    case 9: file = (org.apache.avro.util.Utf8)value$; break;
    case 10: pos = (java.lang.Long)value$; break;
    case 11: row = (java.lang.Integer)value$; break;
    case 12: thread = (java.lang.Long)value$; break;
    case 13: query = (org.apache.avro.util.Utf8)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public org.apache.avro.util.Utf8 getVersion() {
    return version;
  }

  /**
   * Gets the value of the 'version' field as an Optional<org.apache.avro.util.Utf8>.
   * @return The value wrapped in an Optional&lt;org.apache.avro.util.Utf8&gt;.
   */
  public Optional<org.apache.avro.util.Utf8> getOptionalVersion() {
    return Optional.<org.apache.avro.util.Utf8>ofNullable(version);
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(org.apache.avro.util.Utf8 value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'connector' field.
   * @return The value of the 'connector' field.
   */
  public org.apache.avro.util.Utf8 getConnector() {
    return connector;
  }

  /**
   * Gets the value of the 'connector' field as an Optional<org.apache.avro.util.Utf8>.
   * @return The value wrapped in an Optional&lt;org.apache.avro.util.Utf8&gt;.
   */
  public Optional<org.apache.avro.util.Utf8> getOptionalConnector() {
    return Optional.<org.apache.avro.util.Utf8>ofNullable(connector);
  }

  /**
   * Sets the value of the 'connector' field.
   * @param value the value to set.
   */
  public void setConnector(org.apache.avro.util.Utf8 value) {
    this.connector = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public org.apache.avro.util.Utf8 getName() {
    return name;
  }

  /**
   * Gets the value of the 'name' field as an Optional<org.apache.avro.util.Utf8>.
   * @return The value wrapped in an Optional&lt;org.apache.avro.util.Utf8&gt;.
   */
  public Optional<org.apache.avro.util.Utf8> getOptionalName() {
    return Optional.<org.apache.avro.util.Utf8>ofNullable(name);
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(org.apache.avro.util.Utf8 value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'ts_ms' field.
   * @return The value of the 'ts_ms' field.
   */
  public long getTsMs() {
    return ts_ms;
  }

  /**
   * Gets the value of the 'ts_ms' field as an Optional<java.lang.Long>.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalTsMs() {
    return Optional.<java.lang.Long>ofNullable(ts_ms);
  }

  /**
   * Sets the value of the 'ts_ms' field.
   * @param value the value to set.
   */
  public void setTsMs(long value) {
    this.ts_ms = value;
  }

  /**
   * Gets the value of the 'snapshot' field.
   * @return The value of the 'snapshot' field.
   */
  public org.apache.avro.util.Utf8 getSnapshot() {
    return snapshot;
  }

  /**
   * Gets the value of the 'snapshot' field as an Optional<org.apache.avro.util.Utf8>.
   * @return The value wrapped in an Optional&lt;org.apache.avro.util.Utf8&gt;.
   */
  public Optional<org.apache.avro.util.Utf8> getOptionalSnapshot() {
    return Optional.<org.apache.avro.util.Utf8>ofNullable(snapshot);
  }

  /**
   * Sets the value of the 'snapshot' field.
   * @param value the value to set.
   */
  public void setSnapshot(org.apache.avro.util.Utf8 value) {
    this.snapshot = value;
  }

  /**
   * Gets the value of the 'db' field.
   * @return The value of the 'db' field.
   */
  public org.apache.avro.util.Utf8 getDb() {
    return db;
  }

  /**
   * Gets the value of the 'db' field as an Optional<org.apache.avro.util.Utf8>.
   * @return The value wrapped in an Optional&lt;org.apache.avro.util.Utf8&gt;.
   */
  public Optional<org.apache.avro.util.Utf8> getOptionalDb() {
    return Optional.<org.apache.avro.util.Utf8>ofNullable(db);
  }

  /**
   * Sets the value of the 'db' field.
   * @param value the value to set.
   */
  public void setDb(org.apache.avro.util.Utf8 value) {
    this.db = value;
  }

  /**
   * Gets the value of the 'table' field.
   * @return The value of the 'table' field.
   */
  public org.apache.avro.util.Utf8 getTable() {
    return table;
  }

  /**
   * Gets the value of the 'table' field as an Optional<org.apache.avro.util.Utf8>.
   * @return The value wrapped in an Optional&lt;org.apache.avro.util.Utf8&gt;.
   */
  public Optional<org.apache.avro.util.Utf8> getOptionalTable() {
    return Optional.<org.apache.avro.util.Utf8>ofNullable(table);
  }

  /**
   * Sets the value of the 'table' field.
   * @param value the value to set.
   */
  public void setTable(org.apache.avro.util.Utf8 value) {
    this.table = value;
  }

  /**
   * Gets the value of the 'server_id' field.
   * @return The value of the 'server_id' field.
   */
  public long getServerId() {
    return server_id;
  }

  /**
   * Gets the value of the 'server_id' field as an Optional<java.lang.Long>.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalServerId() {
    return Optional.<java.lang.Long>ofNullable(server_id);
  }

  /**
   * Sets the value of the 'server_id' field.
   * @param value the value to set.
   */
  public void setServerId(long value) {
    this.server_id = value;
  }

  /**
   * Gets the value of the 'gtid' field.
   * @return The value of the 'gtid' field.
   */
  public org.apache.avro.util.Utf8 getGtid() {
    return gtid;
  }

  /**
   * Gets the value of the 'gtid' field as an Optional<org.apache.avro.util.Utf8>.
   * @return The value wrapped in an Optional&lt;org.apache.avro.util.Utf8&gt;.
   */
  public Optional<org.apache.avro.util.Utf8> getOptionalGtid() {
    return Optional.<org.apache.avro.util.Utf8>ofNullable(gtid);
  }

  /**
   * Sets the value of the 'gtid' field.
   * @param value the value to set.
   */
  public void setGtid(org.apache.avro.util.Utf8 value) {
    this.gtid = value;
  }

  /**
   * Gets the value of the 'file' field.
   * @return The value of the 'file' field.
   */
  public org.apache.avro.util.Utf8 getFile() {
    return file;
  }

  /**
   * Gets the value of the 'file' field as an Optional<org.apache.avro.util.Utf8>.
   * @return The value wrapped in an Optional&lt;org.apache.avro.util.Utf8&gt;.
   */
  public Optional<org.apache.avro.util.Utf8> getOptionalFile() {
    return Optional.<org.apache.avro.util.Utf8>ofNullable(file);
  }

  /**
   * Sets the value of the 'file' field.
   * @param value the value to set.
   */
  public void setFile(org.apache.avro.util.Utf8 value) {
    this.file = value;
  }

  /**
   * Gets the value of the 'pos' field.
   * @return The value of the 'pos' field.
   */
  public long getPos() {
    return pos;
  }

  /**
   * Gets the value of the 'pos' field as an Optional<java.lang.Long>.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalPos() {
    return Optional.<java.lang.Long>ofNullable(pos);
  }

  /**
   * Sets the value of the 'pos' field.
   * @param value the value to set.
   */
  public void setPos(long value) {
    this.pos = value;
  }

  /**
   * Gets the value of the 'row' field.
   * @return The value of the 'row' field.
   */
  public int getRow() {
    return row;
  }

  /**
   * Gets the value of the 'row' field as an Optional<java.lang.Integer>.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalRow() {
    return Optional.<java.lang.Integer>ofNullable(row);
  }

  /**
   * Sets the value of the 'row' field.
   * @param value the value to set.
   */
  public void setRow(int value) {
    this.row = value;
  }

  /**
   * Gets the value of the 'thread' field.
   * @return The value of the 'thread' field.
   */
  public java.lang.Long getThread() {
    return thread;
  }

  /**
   * Gets the value of the 'thread' field as an Optional<java.lang.Long>.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalThread() {
    return Optional.<java.lang.Long>ofNullable(thread);
  }

  /**
   * Sets the value of the 'thread' field.
   * @param value the value to set.
   */
  public void setThread(java.lang.Long value) {
    this.thread = value;
  }

  /**
   * Gets the value of the 'query' field.
   * @return The value of the 'query' field.
   */
  public org.apache.avro.util.Utf8 getQuery() {
    return query;
  }

  /**
   * Gets the value of the 'query' field as an Optional<org.apache.avro.util.Utf8>.
   * @return The value wrapped in an Optional&lt;org.apache.avro.util.Utf8&gt;.
   */
  public Optional<org.apache.avro.util.Utf8> getOptionalQuery() {
    return Optional.<org.apache.avro.util.Utf8>ofNullable(query);
  }

  /**
   * Sets the value of the 'query' field.
   * @param value the value to set.
   */
  public void setQuery(org.apache.avro.util.Utf8 value) {
    this.query = value;
  }

  /**
   * Creates a new Source RecordBuilder.
   * @return A new Source RecordBuilder
   */
  public static io.debezium.connector.mysql.Source.Builder newBuilder() {
    return new io.debezium.connector.mysql.Source.Builder();
  }

  /**
   * Creates a new Source RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Source RecordBuilder
   */
  public static io.debezium.connector.mysql.Source.Builder newBuilder(io.debezium.connector.mysql.Source.Builder other) {
    if (other == null) {
      return new io.debezium.connector.mysql.Source.Builder();
    } else {
      return new io.debezium.connector.mysql.Source.Builder(other);
    }
  }

  /**
   * Creates a new Source RecordBuilder by copying an existing Source instance.
   * @param other The existing instance to copy.
   * @return A new Source RecordBuilder
   */
  public static io.debezium.connector.mysql.Source.Builder newBuilder(io.debezium.connector.mysql.Source other) {
    if (other == null) {
      return new io.debezium.connector.mysql.Source.Builder();
    } else {
      return new io.debezium.connector.mysql.Source.Builder(other);
    }
  }

  /**
   * RecordBuilder for Source instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Source>
    implements org.apache.avro.data.RecordBuilder<Source> {

    private org.apache.avro.util.Utf8 version;
    private org.apache.avro.util.Utf8 connector;
    private org.apache.avro.util.Utf8 name;
    private long ts_ms;
    private org.apache.avro.util.Utf8 snapshot;
    private org.apache.avro.util.Utf8 db;
    private org.apache.avro.util.Utf8 table;
    private long server_id;
    private org.apache.avro.util.Utf8 gtid;
    private org.apache.avro.util.Utf8 file;
    private long pos;
    private int row;
    private java.lang.Long thread;
    private org.apache.avro.util.Utf8 query;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.debezium.connector.mysql.Source.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.version)) {
        this.version = data().deepCopy(fields()[0].schema(), other.version);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.connector)) {
        this.connector = data().deepCopy(fields()[1].schema(), other.connector);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ts_ms)) {
        this.ts_ms = data().deepCopy(fields()[3].schema(), other.ts_ms);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.snapshot)) {
        this.snapshot = data().deepCopy(fields()[4].schema(), other.snapshot);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.db)) {
        this.db = data().deepCopy(fields()[5].schema(), other.db);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.table)) {
        this.table = data().deepCopy(fields()[6].schema(), other.table);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.server_id)) {
        this.server_id = data().deepCopy(fields()[7].schema(), other.server_id);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.gtid)) {
        this.gtid = data().deepCopy(fields()[8].schema(), other.gtid);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.file)) {
        this.file = data().deepCopy(fields()[9].schema(), other.file);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.pos)) {
        this.pos = data().deepCopy(fields()[10].schema(), other.pos);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.row)) {
        this.row = data().deepCopy(fields()[11].schema(), other.row);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.thread)) {
        this.thread = data().deepCopy(fields()[12].schema(), other.thread);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.query)) {
        this.query = data().deepCopy(fields()[13].schema(), other.query);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing Source instance
     * @param other The existing instance to copy.
     */
    private Builder(io.debezium.connector.mysql.Source other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.version)) {
        this.version = data().deepCopy(fields()[0].schema(), other.version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.connector)) {
        this.connector = data().deepCopy(fields()[1].schema(), other.connector);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ts_ms)) {
        this.ts_ms = data().deepCopy(fields()[3].schema(), other.ts_ms);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.snapshot)) {
        this.snapshot = data().deepCopy(fields()[4].schema(), other.snapshot);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.db)) {
        this.db = data().deepCopy(fields()[5].schema(), other.db);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.table)) {
        this.table = data().deepCopy(fields()[6].schema(), other.table);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.server_id)) {
        this.server_id = data().deepCopy(fields()[7].schema(), other.server_id);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.gtid)) {
        this.gtid = data().deepCopy(fields()[8].schema(), other.gtid);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.file)) {
        this.file = data().deepCopy(fields()[9].schema(), other.file);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.pos)) {
        this.pos = data().deepCopy(fields()[10].schema(), other.pos);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.row)) {
        this.row = data().deepCopy(fields()[11].schema(), other.row);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.thread)) {
        this.thread = data().deepCopy(fields()[12].schema(), other.thread);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.query)) {
        this.query = data().deepCopy(fields()[13].schema(), other.query);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public org.apache.avro.util.Utf8 getVersion() {
      return version;
    }

    /**
      * Gets the value of the 'version' field as an Optional<org.apache.avro.util.Utf8>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<org.apache.avro.util.Utf8> getOptionalVersion() {
      return Optional.<org.apache.avro.util.Utf8>ofNullable(version);
    }

    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setVersion(org.apache.avro.util.Utf8 value) {
      validate(fields()[0], value);
      this.version = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearVersion() {
      version = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'connector' field.
      * @return The value.
      */
    public org.apache.avro.util.Utf8 getConnector() {
      return connector;
    }

    /**
      * Gets the value of the 'connector' field as an Optional<org.apache.avro.util.Utf8>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<org.apache.avro.util.Utf8> getOptionalConnector() {
      return Optional.<org.apache.avro.util.Utf8>ofNullable(connector);
    }

    /**
      * Sets the value of the 'connector' field.
      * @param value The value of 'connector'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setConnector(org.apache.avro.util.Utf8 value) {
      validate(fields()[1], value);
      this.connector = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'connector' field has been set.
      * @return True if the 'connector' field has been set, false otherwise.
      */
    public boolean hasConnector() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'connector' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearConnector() {
      connector = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public org.apache.avro.util.Utf8 getName() {
      return name;
    }

    /**
      * Gets the value of the 'name' field as an Optional<org.apache.avro.util.Utf8>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<org.apache.avro.util.Utf8> getOptionalName() {
      return Optional.<org.apache.avro.util.Utf8>ofNullable(name);
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setName(org.apache.avro.util.Utf8 value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts_ms' field.
      * @return The value.
      */
    public long getTsMs() {
      return ts_ms;
    }

    /**
      * Gets the value of the 'ts_ms' field as an Optional<java.lang.Long>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<java.lang.Long> getOptionalTsMs() {
      return Optional.<java.lang.Long>ofNullable(ts_ms);
    }

    /**
      * Sets the value of the 'ts_ms' field.
      * @param value The value of 'ts_ms'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setTsMs(long value) {
      validate(fields()[3], value);
      this.ts_ms = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ts_ms' field has been set.
      * @return True if the 'ts_ms' field has been set, false otherwise.
      */
    public boolean hasTsMs() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ts_ms' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearTsMs() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'snapshot' field.
      * @return The value.
      */
    public org.apache.avro.util.Utf8 getSnapshot() {
      return snapshot;
    }

    /**
      * Gets the value of the 'snapshot' field as an Optional<org.apache.avro.util.Utf8>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<org.apache.avro.util.Utf8> getOptionalSnapshot() {
      return Optional.<org.apache.avro.util.Utf8>ofNullable(snapshot);
    }

    /**
      * Sets the value of the 'snapshot' field.
      * @param value The value of 'snapshot'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setSnapshot(org.apache.avro.util.Utf8 value) {
      validate(fields()[4], value);
      this.snapshot = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'snapshot' field has been set.
      * @return True if the 'snapshot' field has been set, false otherwise.
      */
    public boolean hasSnapshot() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'snapshot' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearSnapshot() {
      snapshot = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'db' field.
      * @return The value.
      */
    public org.apache.avro.util.Utf8 getDb() {
      return db;
    }

    /**
      * Gets the value of the 'db' field as an Optional<org.apache.avro.util.Utf8>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<org.apache.avro.util.Utf8> getOptionalDb() {
      return Optional.<org.apache.avro.util.Utf8>ofNullable(db);
    }

    /**
      * Sets the value of the 'db' field.
      * @param value The value of 'db'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setDb(org.apache.avro.util.Utf8 value) {
      validate(fields()[5], value);
      this.db = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'db' field has been set.
      * @return True if the 'db' field has been set, false otherwise.
      */
    public boolean hasDb() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'db' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearDb() {
      db = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'table' field.
      * @return The value.
      */
    public org.apache.avro.util.Utf8 getTable() {
      return table;
    }

    /**
      * Gets the value of the 'table' field as an Optional<org.apache.avro.util.Utf8>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<org.apache.avro.util.Utf8> getOptionalTable() {
      return Optional.<org.apache.avro.util.Utf8>ofNullable(table);
    }

    /**
      * Sets the value of the 'table' field.
      * @param value The value of 'table'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setTable(org.apache.avro.util.Utf8 value) {
      validate(fields()[6], value);
      this.table = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'table' field has been set.
      * @return True if the 'table' field has been set, false otherwise.
      */
    public boolean hasTable() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'table' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearTable() {
      table = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'server_id' field.
      * @return The value.
      */
    public long getServerId() {
      return server_id;
    }

    /**
      * Gets the value of the 'server_id' field as an Optional<java.lang.Long>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<java.lang.Long> getOptionalServerId() {
      return Optional.<java.lang.Long>ofNullable(server_id);
    }

    /**
      * Sets the value of the 'server_id' field.
      * @param value The value of 'server_id'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setServerId(long value) {
      validate(fields()[7], value);
      this.server_id = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'server_id' field has been set.
      * @return True if the 'server_id' field has been set, false otherwise.
      */
    public boolean hasServerId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'server_id' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearServerId() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'gtid' field.
      * @return The value.
      */
    public org.apache.avro.util.Utf8 getGtid() {
      return gtid;
    }

    /**
      * Gets the value of the 'gtid' field as an Optional<org.apache.avro.util.Utf8>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<org.apache.avro.util.Utf8> getOptionalGtid() {
      return Optional.<org.apache.avro.util.Utf8>ofNullable(gtid);
    }

    /**
      * Sets the value of the 'gtid' field.
      * @param value The value of 'gtid'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setGtid(org.apache.avro.util.Utf8 value) {
      validate(fields()[8], value);
      this.gtid = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'gtid' field has been set.
      * @return True if the 'gtid' field has been set, false otherwise.
      */
    public boolean hasGtid() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'gtid' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearGtid() {
      gtid = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'file' field.
      * @return The value.
      */
    public org.apache.avro.util.Utf8 getFile() {
      return file;
    }

    /**
      * Gets the value of the 'file' field as an Optional<org.apache.avro.util.Utf8>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<org.apache.avro.util.Utf8> getOptionalFile() {
      return Optional.<org.apache.avro.util.Utf8>ofNullable(file);
    }

    /**
      * Sets the value of the 'file' field.
      * @param value The value of 'file'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setFile(org.apache.avro.util.Utf8 value) {
      validate(fields()[9], value);
      this.file = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'file' field has been set.
      * @return True if the 'file' field has been set, false otherwise.
      */
    public boolean hasFile() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'file' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearFile() {
      file = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'pos' field.
      * @return The value.
      */
    public long getPos() {
      return pos;
    }

    /**
      * Gets the value of the 'pos' field as an Optional<java.lang.Long>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<java.lang.Long> getOptionalPos() {
      return Optional.<java.lang.Long>ofNullable(pos);
    }

    /**
      * Sets the value of the 'pos' field.
      * @param value The value of 'pos'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setPos(long value) {
      validate(fields()[10], value);
      this.pos = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'pos' field has been set.
      * @return True if the 'pos' field has been set, false otherwise.
      */
    public boolean hasPos() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'pos' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearPos() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'row' field.
      * @return The value.
      */
    public int getRow() {
      return row;
    }

    /**
      * Gets the value of the 'row' field as an Optional<java.lang.Integer>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<java.lang.Integer> getOptionalRow() {
      return Optional.<java.lang.Integer>ofNullable(row);
    }

    /**
      * Sets the value of the 'row' field.
      * @param value The value of 'row'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setRow(int value) {
      validate(fields()[11], value);
      this.row = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'row' field has been set.
      * @return True if the 'row' field has been set, false otherwise.
      */
    public boolean hasRow() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'row' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearRow() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'thread' field.
      * @return The value.
      */
    public java.lang.Long getThread() {
      return thread;
    }

    /**
      * Gets the value of the 'thread' field as an Optional<java.lang.Long>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<java.lang.Long> getOptionalThread() {
      return Optional.<java.lang.Long>ofNullable(thread);
    }

    /**
      * Sets the value of the 'thread' field.
      * @param value The value of 'thread'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setThread(java.lang.Long value) {
      validate(fields()[12], value);
      this.thread = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'thread' field has been set.
      * @return True if the 'thread' field has been set, false otherwise.
      */
    public boolean hasThread() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'thread' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearThread() {
      thread = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'query' field.
      * @return The value.
      */
    public org.apache.avro.util.Utf8 getQuery() {
      return query;
    }

    /**
      * Gets the value of the 'query' field as an Optional<org.apache.avro.util.Utf8>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<org.apache.avro.util.Utf8> getOptionalQuery() {
      return Optional.<org.apache.avro.util.Utf8>ofNullable(query);
    }

    /**
      * Sets the value of the 'query' field.
      * @param value The value of 'query'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setQuery(org.apache.avro.util.Utf8 value) {
      validate(fields()[13], value);
      this.query = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'query' field has been set.
      * @return True if the 'query' field has been set, false otherwise.
      */
    public boolean hasQuery() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'query' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearQuery() {
      query = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Source build() {
      try {
        Source record = new Source();
        record.version = fieldSetFlags()[0] ? this.version : (org.apache.avro.util.Utf8) defaultValue(fields()[0]);
        record.connector = fieldSetFlags()[1] ? this.connector : (org.apache.avro.util.Utf8) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (org.apache.avro.util.Utf8) defaultValue(fields()[2]);
        record.ts_ms = fieldSetFlags()[3] ? this.ts_ms : (java.lang.Long) defaultValue(fields()[3]);
        record.snapshot = fieldSetFlags()[4] ? this.snapshot : (org.apache.avro.util.Utf8) defaultValue(fields()[4]);
        record.db = fieldSetFlags()[5] ? this.db : (org.apache.avro.util.Utf8) defaultValue(fields()[5]);
        record.table = fieldSetFlags()[6] ? this.table : (org.apache.avro.util.Utf8) defaultValue(fields()[6]);
        record.server_id = fieldSetFlags()[7] ? this.server_id : (java.lang.Long) defaultValue(fields()[7]);
        record.gtid = fieldSetFlags()[8] ? this.gtid : (org.apache.avro.util.Utf8) defaultValue(fields()[8]);
        record.file = fieldSetFlags()[9] ? this.file : (org.apache.avro.util.Utf8) defaultValue(fields()[9]);
        record.pos = fieldSetFlags()[10] ? this.pos : (java.lang.Long) defaultValue(fields()[10]);
        record.row = fieldSetFlags()[11] ? this.row : (java.lang.Integer) defaultValue(fields()[11]);
        record.thread = fieldSetFlags()[12] ? this.thread : (java.lang.Long) defaultValue(fields()[12]);
        record.query = fieldSetFlags()[13] ? this.query : (org.apache.avro.util.Utf8) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Source>
    WRITER$ = (org.apache.avro.io.DatumWriter<Source>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Source>
    READER$ = (org.apache.avro.io.DatumReader<Source>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.version);

    out.writeString(this.connector);

    out.writeString(this.name);

    out.writeLong(this.ts_ms);

    if (this.snapshot == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.snapshot);
    }

    out.writeString(this.db);

    if (this.table == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.table);
    }

    out.writeLong(this.server_id);

    if (this.gtid == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.gtid);
    }

    out.writeString(this.file);

    out.writeLong(this.pos);

    out.writeInt(this.row);

    if (this.thread == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.thread);
    }

    if (this.query == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.query);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.version = in.readString(this.version);

      this.connector = in.readString(this.connector);

      this.name = in.readString(this.name);

      this.ts_ms = in.readLong();

      if (in.readIndex() != 0) {
        in.readNull();
        this.snapshot = null;
      } else {
        this.snapshot = in.readString(this.snapshot);
      }

      this.db = in.readString(this.db);

      if (in.readIndex() != 1) {
        in.readNull();
        this.table = null;
      } else {
        this.table = in.readString(this.table);
      }

      this.server_id = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.gtid = null;
      } else {
        this.gtid = in.readString(this.gtid);
      }

      this.file = in.readString(this.file);

      this.pos = in.readLong();

      this.row = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.thread = null;
      } else {
        this.thread = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.query = null;
      } else {
        this.query = in.readString(this.query);
      }

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.version = in.readString(this.version);
          break;

        case 1:
          this.connector = in.readString(this.connector);
          break;

        case 2:
          this.name = in.readString(this.name);
          break;

        case 3:
          this.ts_ms = in.readLong();
          break;

        case 4:
          if (in.readIndex() != 0) {
            in.readNull();
            this.snapshot = null;
          } else {
            this.snapshot = in.readString(this.snapshot);
          }
          break;

        case 5:
          this.db = in.readString(this.db);
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.table = null;
          } else {
            this.table = in.readString(this.table);
          }
          break;

        case 7:
          this.server_id = in.readLong();
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gtid = null;
          } else {
            this.gtid = in.readString(this.gtid);
          }
          break;

        case 9:
          this.file = in.readString(this.file);
          break;

        case 10:
          this.pos = in.readLong();
          break;

        case 11:
          this.row = in.readInt();
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.thread = null;
          } else {
            this.thread = in.readLong();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.query = null;
          } else {
            this.query = in.readString(this.query);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










